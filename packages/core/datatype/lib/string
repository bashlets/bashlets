#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::stream::reorder
source bashlets core::stream::reshape
source bashlets core::os::random

#@public
function bashlets::core::datatype::string::new()
{
    :
}

#@public
function bashlets::core::datatype::string::destroy()
{
    :
}

#@public
function bashlets::core::datatype::string::to_string()
{
    echo "$@"
}

#@public
function bashlets::core::datatype::string::random()
{
    local size="${1:-16}"
    $BASHLETS_NAMESPACE random get "$size" [[:print:]]
}

#@public
function bashlets::core::datatype::string::validate()
{
    [[ $1 =~ ^[[:print:]]*$ ]]
}

#@public
function bashlets::core::datatype::string::chop()
{
    echo "$(echo "$@" | tr -d "\n")"
}

#@public
function bashlets::core::datatype::string::length()
{
    local str="$*"
    echo ${#str}
}

#@public
function bashlets::core::datatype::string::index()
{
    # cf. https://github.com/marcomaggi/mbfl/blob/master/src/modules/string.sh.m4
    local haystack="$1"
    local needle="$2"
    local start="${3:-0}"
    local i

    for ((i=$start; $i < ${#haystack}; ++i))
    do
        test "${haystack:$i:1}" = "$needle" && {
            echo "$i"
            return 0
        }
    done
}

#@public
function bashlets::core::datatype::string::upper()
{
    echo "$*" | tr a-z A-Z
}

#@public
function bashlets::core::datatype::string::lower()
{
    echo "$*" | tr A-Z a-z
}

#@public
function bashlets::core::datatype::string::to_integer()
{
    printf "%d\n" "$1" 2> /dev/null || true  # convert 123xyz -> 123
}

#@public
function bashlets::core::datatype::string::to_bool()
{
    local value="$(bashlets::core::datatype::string::lower "$*")"
    local try

    [[ -n $value ]] || return 1

    for try in y yes true 1
    do
        [[ $value == $try ]] && return
    done

    return 1
}

#@public
function bashlets::core::datatype::string::bin_to_dec()
{
    local bin="$1"
    echo $((2#$bin))  # TODO: check for errors
}


#@public
function bashlets::core::datatype::string::dec_to_bin()
{
    # TODO check extreme cases (dec < 0, dec > 255)
    declare -i dec="$1"
    # https://stackoverflow.com/questions/44738494/
    declare -a D2B=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})

    echo ${D2B[$dec]}
}

#@public
function bashlets::core::datatype::string::hex_to_dec()
{
    local hex="$1"
    echo $((16#$hex))  # TODO: check for errors
}

#@public
function bashlets::core::datatype::string::dec_to_hex()
{
    ########################################################################
    #
    # Code borrowed from: text_convert.sh by Luciano D. Cerere
    #
    # cf. https://gist.github.com/ldante86/679c2240acd7cc838e1d6fcac97dc4d3
    #
    ########################################################################

    declare -a base16=( {0..10} {A..F} )

	local dec="$1" digit size hex

	[ -z "$dec" ] && return 1

	while (( dec != 0 ))
	do
		((digit=dec % 16))
		if (( digit >= 10 ))
		then
			hex=${base16[digit+1]}${hex}
		else
			hex=${base16[digit]}${hex}
		fi
		((dec/=16))
	done

	echo $hex
}

#@public
function bashlets::core::datatype::string::to_stream()
{
    local chr
    echo -n "$*" | while read -r -n1 chr; do echo "$chr"; done
}

#@public
function bashlets::core::datatype::string::to_matrix()
{
    declare -i cols=${1:-1} chr
    shift
    ((cols > 0)) || return 1
    echo -n "$*" | xargs -n $cols
}

#@public
function bashlets::core::datatype::string::reverse()
{
    # cf. http://stackoverflow.com/questions/11461625/
    local str="$*"
    local rev

    for ((i=${#str}-1 ; i >= 0 ; i--))
    do
        rev="$rev${str:$i:1}"
    done

    echo "$rev"
}

#@public
function bashlets::core::datatype::string::transpose()
{
    bashlets::core::datatype::string::to_stream "$*"
}

#@public
function bashlets::core::datatype::string::shuffle()
{
    local str="$*"

    [[ -n $str ]] || return

    bashlets::core::datatype::string::to_stream "$str"    \
        | $BASHLETS_NAMESPACE reorder shuffle       \
        | $BASHLETS_NAMESPACE reshape transpose
}


#
# if $* has length 2^n, return the central 2^(n-1) characters;
# otherwise, return nothing
#

#@public
function bashlets::core::datatype::string::middle_2n()
{
    local str="$*"
    local len=${#str}

    local c2="$((len/2))"
    local c4="$((len/4))"

    echo "$str" | sed -n "s/^.\{$c4\}\(.\{$c2\}\).\{$c4\}$/\1/p"
}


#
# left-pad a given string with PAD, so that its length is rounded up
# to the next multiple of N
#

#@public
function bashlets::core::datatype::string::lalign_n()
{
    local n="$1"
    local pad="$2"
    shift 2
    local str="$*"
    local len=${#str}

    local q="$((len/n))"
    local r="$((len%n))"

    [[ $r -eq 0 ]] || r=n

    len="$((n*q+r))"

    printf "%0${len}s" "$str" | tr " " "$pad"
}


#  Computing the Levenshtein distance is based on the observation that if we
#  reserve a matrix to hold the Levenshtein distances between all prefixes of
#  the first string and all prefixes of the second, then we can compute the
#  values in the matrix by flood filling the matrix, and thus find the distance
#  between the two full strings as the last value computed.
#  
#  This algorithm, an example of bottom-up dynamic programming, is discussed,
#  with variants, in the 1974 article The String-to-string correction problem
#  by Robert A. Wagner and Michael J. Fischer.
#
#  see http://en.wikipedia.org/wiki/Levenshtein_distance

#@public
function bashlets::core::datatype::string::levenshtein()
{
    local s=$1 t=$2

    awk -v s=$s -v t=$t -e '
        function min(x, y)
        {
            if (x <= y)
                return x
            else
                return y
        }

        function min3(x, y, z)
        {
            return min(min(x, y), z)
        }

        function LevenshteinDistance(s, t)
        {

            # for all i and j, d[i,j] holds the Levenshtein distance between
            # the first i characters of s and the first j characters of t

            m = length(s)
            n = length(t)

            # the distance of any first string to an empty second string
            for (i = 1; i <= m+1; i++)
                d[i, 1] = i - 1;

            # the distance of any second string to an empty first string
            for (j = 1; j <= n+1; j++)
                d[1, j] = j - 1;

            for (j = 2; j <= n+1; j++) {
                for (i = 2; i<= m+1; i++) {
                    if (substr(s, i-1, 1) == substr(t, j-1, 1))
                        d[i, j] = d[i-1, j-1]          # a no-op
                    else
                        d[i, j] = min3(d[i-1, j] + 1,  # a deletion
                            d[i, j-1] + 1,             # an insertion
                            d[i-1, j-1] + 1)           # a substitution
                }
            }

            return d[m+1, n+1]
        }


        BEGIN {
            print LevenshteinDistance(s, t)
        }
    '
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
