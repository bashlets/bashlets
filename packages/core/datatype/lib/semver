#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


# Semantic versioning: https://semver.org/


source bashlets core::datatype::unsigned


#@public
function bashlets::core::datatype::semver::new()
{
    :
}

#@public
function bashlets::core::datatype::semver::destroy()
{
    :
}

#@public
function bashlets::core::datatype::semver::to_string()
{
    echo "$@"
}

#@public
function bashlets::core::datatype::semver::random()
{
    local depth="${1:-3}"
    local major minor patch prerelease build
    local raw semver

    declare -a prereleases=(
        prealpha
        alpha
        beta
        gamma
        delta
        nightly
        rc
        ga
    )

    # get a random unsigned integer of size 5
    raw="$($BASHLETS_NAMESPACE unsigned random 5)"

    major="${raw:0:1}"
    # SemVer ยง9: Numeric identifiers MUST NOT include leading zeroes.
    printf -v minor "%d" "${raw:1:2}"
    printf -v patch "%d" "${raw:3:2}"

    [[ $depth -gt 0 ]] && semver="$major"
    [[ $depth -gt 1 ]] && semver="${semver}.${minor}"
    [[ $depth -gt 2 ]] && semver="${semver}.${patch}"

    # pre-release
    if [[ $depth -gt 3 ]]
    then
        declare -i random="$($BASHLETS_NAMESPACE unsigned random)"
        prerelease="${prereleases[$random % ${#prereleases[@]}]}"
        semver="${semver}-${prerelease}"
    fi

    # build metadata
    if [[ $depth -gt 4 ]]
    then
        build="$($BASHLETS_NAMESPACE unsigned random 10)"
        semver="${semver}+${build}"
    fi

    echo "$semver"
}

function __bashlets::core::datatype::semver::parse()
{
    # cf. https://github.com/cloudflare/semver_bash
    local semver="$1" group="${2:-0}"
    local element='(0|[1-9][0-9]*)'
    local prerelease='([0-9A-Za-z-]+)'
    local build='([0-9A-Za-z-]+)'
    local regex="^($element)([.]$element*([.]$element)*)(-$prerelease([+]$build)?|[+]$build)?$"

    [[ $semver =~ $regex ]] || return 1

    case $group in
        0)
            ;;
        [1-3])  # elements
            group=$((group * 2))
            echo "${BASH_REMATCH[$group]}"
            ;;
        4)      # pre-release
            echo "${BASH_REMATCH[8]}"
            ;;
        5)      # build metadata
            [[ -n "${BASH_REMATCH[10]}" ]] && echo "${BASH_REMATCH[10]}"
            [[ -n "${BASH_REMATCH[11]}" ]] && echo "${BASH_REMATCH[11]}"
            ;;
        *)
            return 1
            ;;
    esac
}

#@public
function bashlets::core::datatype::semver::validate()
{
    __bashlets::core::datatype::semver::parse "$1"
}

#@public
function bashlets::core::datatype::semver::major()
{
    __bashlets::core::datatype::semver::parse "$1" 1
}

#@public
function bashlets::core::datatype::semver::minor()
{
    __bashlets::core::datatype::semver::parse "$1" 2
}

#@public
function bashlets::core::datatype::semver::patch()
{
    __bashlets::core::datatype::semver::parse "$1" 3
}

#@public
function bashlets::core::datatype::semver::prerelease()
{
    __bashlets::core::datatype::semver::parse "$1" 4
}

#@public
function bashlets::core::datatype::semver::build()
{
    __bashlets::core::datatype::semver::parse "$1" 5
}

function __bashlets::core::datatype::semver::sort()
{
    # naive Bash implementation
    # cf. http://stackoverflow.com/questions/16989598/
    test $# -gt 0 &&
        echo "$@"                                                     \
            | xargs -n 1                                              \
            | awk -F. '{ printf("%d.%d.%d.%s\n", $1, $2, $3, $0) }'   \
            | sort -t. -n -k1,3                                       \
            | sed 's/^[0-9]\.[0-9]\.[0-9]\.\([0-9]*\)/\1/'
}

#@public
function bashlets::core::datatype::semver::sort()
{
    (
        echo "$@" | xargs -n 1 | sort --version-sort

    ) 2> /dev/null || __bashlets::core::datatype::semver::sort "$@"
}

#@public
function bashlets::core::datatype::semver::lt()
{
    local min
    # GNU sort is needed here
    min="$(bashlets::core::datatype::semver::sort "$@" | head -1)"
    [[ $1 != $2 && $min == $1 ]]
}

#@public
function bashlets::core::datatype::semver::gt()
{
    local max
    # GNU sort is needed here
    max="$(bashlets::core::datatype::semver::sort "$@" | tail -1)"
    [[ $1 != $2 && $max == $1 ]]
}

#@public
function bashlets::core::datatype::semver::le()
{
    local min
    # GNU sort is needed here
    min="$(bashlets::core::datatype::semver::sort "$@" | head -1)"
    [[ $min == $1 ]]
}

#@public
function bashlets::core::datatype::semver::ge()
{
    local max
    # GNU sort is needed here
    max="$(bashlets::core::datatype::semver::sort "$@" | tail -1)"
    [[ $max == $1 ]]
}

#@public
function bashlets::core::datatype::semver::min()
{
    bashlets::core::datatype::semver::sort "$@" | head -1
}

#@public
function bashlets::core::datatype::semver::max()
{
    bashlets::core::datatype::semver::sort "$@" | tail -1
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
