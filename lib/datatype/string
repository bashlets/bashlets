#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-5 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlet charstream/reorder
source bashlet charstream/reshape
source bashlet os/random

function bashlets_datatype_string_chop()
{
    echo "$(echo "$@" | tr -d "\n")"
}

function bashlets_datatype_string_length()
{
    local str="$*"
    echo ${#str}
}

function bashlets_datatype_string_index()
{
    # cf. https://github.com/marcomaggi/mbfl/blob/master/src/modules/string.sh.m4
    local haystack="$1"
    local needle="$2"
    local start="${3:-0}"
    local i

    for ((i=$start; $i < ${#haystack}; ++i))
    do
        test "${haystack:$i:1}" = "$needle" && {
            echo "$i"
            return 0
        }
    done
}

function bashlets_datatype_string_upper()
{
    echo "$*" | tr a-z A-Z
}

function bashlets_datatype_string_lower()
{
    echo "$*" | tr A-Z a-z
}

function bashlets_datatype_string_to_bool()
{
    local value="$(bashlets_datatype_string_lower "$*")"
    local try

    [[ -n $value ]] || return 1

    for try in y yes true 1
    do
        [[ $value == $try ]] && return
    done

    return 1
}

function bashlets_datatype_string_rot13()
{
    # cf. http://rosettacode.org/wiki/Rot-13#Bourne_Shell
    echo "$*" | tr a-zA-Z n-za-mN-ZA-M
}

function bashlets_datatype_string_to_charstream()
{
    local chr
    echo -n "$*" | while read -r -n1 chr; do echo "$chr"; done
}

function bashlets_datatype_string_reverse()
{
    # cf. http://stackoverflow.com/questions/11461625/
    local str="$*"
    local rev

    for ((i=${#str}-1 ; i >= 0 ; i--))
    do
        rev="$rev${str:$i:1}"
    done

    echo "$rev"
}

function bashlets_datatype_string_transpose()
{
    bashlets_datatype_string_to_charstream "$*"
}

function bashlets_datatype_string_shuffle()
{
    local str="$*"

    [[ -n $str ]] || return

    bashlets_datatype_string_to_charstream "$str"    \
        | reorder shuffle                            \
        | reshape transpose
}


#
# if $* has length 2^n, return the central 2^(n-1) characters;
# otherwise, return nothing
#

function bashlets_datatype_string_middle_2n()
{
    local str="$*"
    local len=${#str}

    local c2="$((len/2))"
    local c4="$((len/4))"

    echo "$str" | sed -n "s/^.\{$c4\}\(.\{$c2\}\).\{$c4\}$/\1/p"
}


#
# left-pad a given string with PAD, so that its length is rounded up
# to the next multiple of N
#

function bashlets_datatype_string_lalign_n()
{
    local n="$1"
    local pad="$2"
    shift 2
    local str="$*"
    local len=${#str}

    local q="$((len/n))"
    local r="$((len%n))"

    [[ $r -eq 0 ]] || r=n

    len="$((n*q+r))"

    printf "%0${len}s" "$str" | tr " " "$pad"
}


function bashlets_datatype_string_generate_random()
{
    local size="${1:-16}"

    random get_stream "$size" [[:print:]]
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
