#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-20 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################

source bashlets core::os::random

#@public
function bashlets::core::datatype::integer::new()
{
    :
}

#@public
function bashlets::core::datatype::integer::destroy()
{
    :
}

#@public
function bashlets::core::datatype::integer::to_string()
{
    echo "$@"
}

#@public
function bashlets::core::datatype::integer::random()
{
    local size="${1:-16}" raw sign

    [[ $size -eq 0 ]] && return

    raw="$($BASHLETS_NAMESPACE random get "$size" 0-9)"

    # avoid leading zeros, but printf "%d" has problems with arbitrary length
    raw="${raw##0}"
    [[ -z $raw ]] && raw=0

    sign="$($BASHLETS_NAMESPACE random get 1 +-)"
    [[ $sign == + || $raw -eq 0 ]] && sign=

    echo "${sign}${raw}"
}

#@public
function bashlets::core::datatype::integer::validate()
{
    [[ $1 =~ ^[-+]?[0-9]+$ ]]
}

#@public
function bashlets::core::datatype::integer::select_bit()
{
    # cf. https://github.com/ldante86/punch/blob/master/punch.sh

    echo $(( $1 & (1<<$2) ))
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
