#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-5 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################



__bashletLocalPool=~/.bashlets
BASHLETS_LIB_LIBRARY_LOADER_STYLE=new  # old/new

function __bashlets_library_loader_bashlet_to_name()
{
    local bashlet="$1"

    [[ $bashlet =~ ^: ]] && {
        # plugin names are prefixed by a colon
        basename "${bashlet:1}"
    } || {
        basename "${bashlet}"
    }
}

function __bashlets_library_loader_bashlet_to_path()
{
    local bashlet="$1"

    if [[ $bashlet =~ ^: ]]; then
        # plugin names are prefixed by a colon
        dirname "${bashlet:1}"
    elif [[ $bashlet =~ @arch@ ]]; then
        echo "arch/$BASHLETS_OSTYPE"
    else
        dirname "$bashlet"
    fi
}

function __bashlets_library_loader_bashlet_to_file()
{
    local bashlet="$1"

    if [[ $bashlet =~ ^: ]]; then
        # plugin names are prefixed by a colon
        echo "$__bashletLocalPool/plugins/${bashlet:1}"
    elif [[ $bashlet =~ @arch@ ]]; then
        echo "$__bashletLocalPool/arch/$BASHLETS_OSTYPE/$(basename "$bashlet")"
    else
        echo "$__bashletLocalPool/lib/$bashlet"
    fi
}

function __bashlets_library_loader_list_all_methods()
{
    declare -F | sed 's/declare -f //' | grep -v "^$FUNCNAME$"
}

#@method
function bashlets_library_loader_list_methods_old()
{
    local bashlet="$(__bashlets_library_loader_bashlet_to_file "$1")"

    (
        for method in $(__bashlets_library_loader_list_all_methods)
        do
            unset -f -- "$method"
        done

        source "$bashlet"

        __bashlets_library_loader_list_all_methods
    )
}

#@method
function bashlets_library_loader_list_methods_new()
{
    local bashlet="$(__bashlets_library_loader_bashlet_to_file "$1")"

    grep -A 1 '^#@method' < "$bashlet" | sed -n 's/function \(.*\)()/\1/p'
}

#@method
function bashlets_library_loader_search_methods()
{
    local bashlet_name="$1"
    local method_fullname method_name pattern bashlet_path

    for method_fullname in $(__bashlets_library_loader_list_all_methods)
    do
        pattern="^bashlets_([^_]+)_${bashlet_name}_(.+)"

        if [[ $method_fullname =~ $pattern ]]
        then
            bashlet_path=${BASH_REMATCH[1]}
            method_name=${BASH_REMATCH[2]}
            echo $bashlet_path $bashlet_name $method_name
        fi
    done
}

#@method
function bashlets_library_loader_import()
{
    local bashlet="$1"
    local bashlet_name bashlet_path file_name
    local bashlets_library_loader_list_methods
    local container_name container_def method_prefix

    bashlet_name="$(__bashlets_library_loader_bashlet_to_name "$bashlet")"
    bashlet_path="$(__bashlets_library_loader_bashlet_to_path "$bashlet")"
       file_name="$(__bashlets_library_loader_bashlet_to_file "$bashlet")"

    source "$file_name" || return 1

    [[ $bashlet =~ ^: ]] && {
        # container names of plugins are prefixed by a colon (like plugin names)
        container_name=":$bashlet_name"
    } || {
        container_name="$bashlet_name"
    }

    [[ $bashlet =~ ^@arch@ ]] && {
        method_prefix="bashlets_arch_${bashlet_name}"
    } || {
        method_prefix="bashlets_${bashlet_path}_${bashlet_name}"
    }

    container_def="function ${container_name}()
    {
        local method=\"\$1\" ; shift

        case \"\$method\" in
    "

#    for method in $(
#        bashlets_library_loader_search_methods "$bashlet" |  \
#            sed "s/${method_prefix}_//"
#    )
#    do
#        echo $method
#    done

    if [[ $BASHLETS_LIB_LIBRARY_LOADER_STYLE == new ]]; then
        bashlets_library_loader_list_methods=bashlets_library_loader_list_methods_new
    elif [[ $BASHLETS_LIB_LIBRARY_LOADER_STYLE == old ]]; then
        bashlets_library_loader_list_methods=bashlets_library_loader_list_methods_old
    else
        return 1
    fi

    for method in $(
        $bashlets_library_loader_list_methods "$bashlet" |  \
            sed "s/${method_prefix}_//"
    )
    do
        container_def="$container_def
            $method)
                ${method_prefix}_\$method \"\$@\"
                ;;
        "
    done

    container_def="$container_def
            *)
                echo \"Method not found!\"
                return 1
                ;;
        esac
    }
    "

    eval "$container_def"
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
