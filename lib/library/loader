#!/bin/bash

################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################



BASHLETS_NAMESPACE=bash$$

function __bashlets::core::library::loader::module_to_package()
{
    [[ $1 =~ ([^:]+)::(.+)* ]] && echo ${BASH_REMATCH[1]}
}

function __bashlets::core::library::loader::module_to_container()
{
    [[ $1 =~ (.+)*::([^:]+) ]] && echo ${BASH_REMATCH[2]}
}

function __bashlets::core::library::loader::module_to_path()
{
    [[ $1 =~ ([^:]+)::(.+)* ]] && echo ${BASH_REMATCH[2]}
}

function __bashlets::core::library::loader::module_to_file()
{
    local module="$1" package path file

    package="$(__bashlets::core::library::loader::module_to_package "$module")"
    path="$(__bashlets::core::library::loader::module_to_path "$module")"

    path="${path//:://}"

    file="$BASHLETS_BASE/$package/${BASHLETS_REV:-DEFAULT}/lib/$path"
    [[ -e $file ]] && echo $file && return
}

function __bashlets::core::library::loader::list_all_methods()
{
    declare -F | sed 's/declare -f //' | grep -v "^$FUNCNAME$"
}

#@public
function bashlets::core::library::loader::list_methods()
{
    local file="$(__bashlets::core::library::loader::module_to_file "$1")"

    # public methods must be explicitly marked, because using something along
    # the lines of
    #   egrep -o '[A-Za-z0-9_]+[(]+[)]' $file
    # would match also ``closures'', such as baz() in the following example
    #   function foo() { local bar='function baz() { : }' ; }
    # or $BASHLETS_NAMESPACE() in bashlets::core::library::loader::import() below

    grep -A 1 '^#\+ *@public' "$file" | sed -n 's/function \([A-Za-z0-9_:]\+\)()/\1/p'
}

#@public
function bashlets::core::library::loader::search_methods()
{
    local module_name="$1"
    local method_fullname method_name pattern module_package

    for method_fullname in $(__bashlets::core::library::loader::list_all_methods)
    do
        pattern="^bashlets::([^:]+)::${module_name}::(.+)"

        if [[ $method_fullname =~ $pattern ]]
        then
            module_package=${BASH_REMATCH[1]}
            method_name=${BASH_REMATCH[2]}

            echo "$module_package:$module_name:$method_name"
        fi
    done
}

#@public
function bashlets::core::library::loader::import()
{
    local module="$1"
    local module_package module_path file_name
    local loader_def
    local container_name container_def container_def_0 method_prefix
    local method method_full
    local methods_list methods_list_0

    module_package="$(__bashlets::core::library::loader::module_to_package   "$module")"
       module_path="$(__bashlets::core::library::loader::module_to_path      "$module")"
         file_name="$(__bashlets::core::library::loader::module_to_file      "$module")"
    container_name="$(__bashlets::core::library::loader::module_to_container "$module")"

    source "$file_name" || return 1

    container_name="$module_package"
    method_prefix="bashlets::${module_package}::${module_path}"

    # loader

    loader_def="function $BASHLETS_NAMESPACE()
    {
        local container=\"\$1\" ; shift

        bashlets::\$container \"\$@\"
    }"

    eval "$loader_def"

    # container header

    container_def="function bashlets::${container_name}()
    {
        local method=\"\$1\" ; shift

        case \"\$method\" in
    "

    # inherited methods (to be added afterwards)

    for method_full in $(
        bashlets::core::library::loader::search_methods "$module_package"
    )
    do
        local v module_name_0 module_package_0 method_prefix_0

        IFS=: read -r module_package_0 module_name_0 method <<<"$method_full"

        method_prefix_0="bashlets::${module_package_0}::${module_name_0}"

        container_def_0="$container_def_0
            $method)
                ${method_prefix_0}::\$method \"\$@\"
                ;;
        "
        
        methods_list_0="$methods_list_0@$method"
    done

    # new methods

    for method in $(
        bashlets::core::library::loader::list_methods "$module" |  \
            sed "s/${method_prefix}:://"
    )
    do
        container_def="$container_def
            $method)
                ${method_prefix}::\$method \"\$@\"
                ;;
        "

        methods_list="$methods_list@$method"
    done

    # add inherited methods

    container_def="$container_def
    $container_def_0
    "
    methods_list="$methods_list@$methods_list_0"

    # introspection methods

    container_def="$container_def

            @methods)
    "
    sorted_methods=($(tr @ '\n' <<<"$methods_list" | sort -u))
    for method in "${sorted_methods[@]}"
    do
        container_def="$container_def
                echo \"$method\"
        "
    done
    container_def="$container_def
                ;;
    "

    # container footer

    container_def="$container_def

            *)
                echo \"Method not found!\"
                return 1
                ;;
        esac
    }
    "

    eval "$container_def"
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
