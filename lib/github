#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::api
source bashlets core::github::defs
source bashlets core::github::page

# List all Codes of Conduct.
#
# @cf   https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct
#@public
function bashlets::core::github::github::conducts()
{
    local url="/codes_of_conduct"

    (
        # The Codes of Conduct API is currently available for developers to
        # preview. To access the API during the preview period, we must provide
        # a custom media type in the Accept header.

        BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS="$BASHLETS_CORE_GITHUB_API_CUSTOM_HEADERS -H 'Accept: application/vnd.github.scarlet-witch-preview+json'"
        $BASHLETS_NAMESPACE api get "$url" | $BASHLETS_NAMESPACE api filter .[].key
    )
}

# @cf   https://developer.github.com/v3/emojis/#emojis
#@public
function bashlets::core::github::github::emojis()
{
    local url="/emojis"
    
    $BASHLETS_NAMESPACE api get "$url" | jq -r keys[]
}

# @cf   https://developer.github.com/v3/gists/#list-all-public-gists
#@public
function bashlets::core::github::github::gists()
{
    local since="${1:-$BASHLETS_CORE_GITHUB_API_EPOCH}"
    limit="${2:-100}" callback="${3:-cat}"
    local url="/gists/public?since=$since"
    
    $BASHLETS_NAMESPACE page items "$url" id "$limit" "$callback"
}

# Fetch a .gitignore template by name.
#
# @cf   https://developer.github.com/v3/gitignore/#get-a-single-template
#@public
function bashlets::core::github::github::gitignore()
{
    local name="${1:?Template name required}"
    local url="/gitignore/templates/$name"
    
    $BASHLETS_NAMESPACE api get "$url" | jq -r .source
}

# List all .gitignore templates available to pass as an option when creating a
# repository.
#
# @cf   https://developer.github.com/v3/gitignore/#listing-available-templates
#@public
function bashlets::core::github::github::gitignores()
{
    local url="/gitignore/templates"
    
    $BASHLETS_NAMESPACE api get "$url" | jq -r .[] | sort
}

# @cf   https://developer.github.com/v3/licenses/#list-all-licenses
#@public
function bashlets::core::github::github::licenses()
{
    local url="/licenses"
    
    $BASHLETS_NAMESPACE api get "$url" | jq -r .[].key | sort
}

# @cf   https://developer.github.com/v3/repos/#list-all-public-repositories
#@public
function bashlets::core::github::github::repos()
{
    local since="${1:-0}" limit="${2:-100}" callback="${3:-cat}"
    local url="/repositories?since=$since"
    
    $BASHLETS_NAMESPACE page items "$url" full_name "$limit" "$callback"
}

# @cf   https://developer.github.com/v3/users/#get-all-users
#@public
function bashlets::core::github::github::users()
{
    local since="${1:-0}" limit="${2:-100}" callback="${3:-cat}"
    local url="/users?since=$since"
    
    $BASHLETS_NAMESPACE page items "$url" login "$limit" "$callback"
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
