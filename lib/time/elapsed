#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets datatype/integer
source bashlets datatype/float

#@public
function bashlets::time::elapsed::new()
{
    :
}

#@public
function bashlets::time::elapsed::destroy()
{
    :
}

#@public
function bashlets::time::elapsed::to_string()
{
    echo "$@"
}

#@public
function bashlets::time::elapsed::random()
{
    $BASHLETS_NAMESPACE integer random 11
}

#@public
function bashlets::time::elapsed::validate()
{
    $BASHLETS_NAMESPACE integer validate "$@"
}

#@public
function bashlets::time::elapsed::to_formatted()
{
    # https://gist.github.com/ldante86/dca1822f6da1fef40efddb1f969fa056

    local    SECONDS_IN_DAY=86400
    local   SECONDS_IN_HOUR=3600
    local   MINUTES_IN_HOUR=60
    local SECONDS_IN_MINUTE=60

    local elapsed=$1 SECONDS
    local days hours minutes seconds

    [[ -n $elapsed ]] || return

    $BASHLETS_NAMESPACE float validate "$elapsed" || return 1

       days=$((elapsed / SECONDS_IN_DAY))
    SECONDS=$((elapsed % SECONDS_IN_DAY))
    
      hours=$(((SECONDS / SECONDS_IN_HOUR)))
    minutes=$(((SECONDS / SECONDS_IN_MINUTE) % MINUTES_IN_HOUR))
    seconds=$(((SECONDS % SECONDS_IN_MINUTE)))

    printf "%02d:%02d:%02d:%02d\n" "$days" "$hours" "$minutes" "$seconds"
}

#@public
function bashlets::time::elapsed::describe()
{
    local days hours minutes seconds

    local formatted="$(bashlets::time::elapsed::to_formatted "$1")"
    IFS=: read days hours minutes seconds <<< "$formatted"

    days=${days#0}
    hours=${hours#0}
    minutes=${minutes#0}
    seconds=${seconds#0}

    printf                                                      \
        "%d day(s), %d hour(s), %d minute(s), %d second(s)\n"   \
        "$days" "$hours" "$minutes" "$seconds"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
