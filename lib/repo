#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::defs
source bashlets core::github::page

#@public
function bashlets::core::github::repo::new()
{
    local name="$1" json
    local url="/user/repos"

    json="{ \"name\": \"$name\" }"
    $BASHLETS_NAMESPACE api post "$url" "$json"
}

#@public
function bashlets::core::github::repo::commits()
{
    local user="${1:-bashlets}" repo="${2:-bashlets}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/repos/$user/$repo/commits"
    local count=0
    
    while true
    do
        local commit next
        declare -a commits=($($BASHLETS_NAMESPACE api get "$url" | jq -r .[].sha?))

        for commit in "${commits[@]}"
        do
            (( count < limit )) || break 2
            ((count++))
            [[ -n $commit ]] && echo "$commit"
        done

        next="$($BASHLETS_NAMESPACE page next "$url")"
        [[ -n $next ]] || break
        url="$next"

    done | $callback
}

#@public
function bashlets::core::github::repo::tags()
{
    local user="${1:-bashlets}" repo="${2:-bashlets}"
    local limit="${3:-100}" callback="${4:-cat}"
    local url="/repos/$user/$repo/tags"
    local count=0
    
    while true
    do
        local tag next
        declare -a tags=($($BASHLETS_NAMESPACE api get "$url" | jq -r .[].name?))

        for tag in "${tags[@]}"
        do
            (( count < limit )) || break 2
            ((count++))
            [[ -n $tag ]] && echo "$tag"
        done

        next="$($BASHLETS_NAMESPACE page next "$url")"
        [[ -n $next ]] || break
        url="$next"

    done | $callback
}

#@public
function bashlets::core::github::repo::readme()
{
    local user="${1:-bashlets}" repo="${2:-bashlets}"
    local url="/repos/$user/$repo/readme"
    local download_url

    download_url="$($BASHLETS_NAMESPACE api get "$url" | jq -r .download_url?)"
    [[ -n $download_url ]] && curl -s "$download_url"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
