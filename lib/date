#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::datatype::unsigned
source bashlets core::time::month


#@public
function bashlets::core::time::date::new()
{
    :
}

#@public
function bashlets::core::time::date::destroy()
{
    :
}

#@public
function bashlets::core::time::date::to_string()
{
    echo "$@"
}

function __bashlets::core::time::date::sanitize()
{
    local year month day junk

    IFS=' ' read year month day junk <<< "${@//[!0-9]/ }" 

    if [[ $year =~ ^[0-9]{4}[0-1][0-9][0-3][0-9]$ ]]
    then
        day=${year:-2}
        month=${year:4:2}
        year=${year:0:4}
    fi

    printf "%d-%02d-%02d\n" "$year" "$month" "$day"
}

#@public
function bashlets::core::time::date::validate()
{
    # based on http://cfajohnson.com/shell/date-functions/?is_date

    local year month day
    local days_in_month jgmonth=175209 ym

    IFS=- read year month day <<< "$(__bashlets::core::time::date::sanitize "$@")"

    day=${day#0}
    month=${month#0}

    # invalid month/invalid day
    (( month < 1 )) || (( month > 12 )) ||
        (( day < 1 )) || (( day > 31 )) && return 1

    printf -v ym "%d%02d" "$year" "$month"

    if (( ym == jgmonth )) && (( day > 2 )) && (( day < 14 ))
    then
        # invalid date (Julian to Gregorian changeover)
        return 1
    fi

    days_in_month="$($BASHLETS_NAMESPACE month days "$month" "$year")"

    (( day <= days_in_month ))
}

#@public
function bashlets::core::time::date::random()
{
    # based on http://cfajohnson.com/shell/date-functions/?random_date

    local first=${1:-1752} last=${2:-2100}
    local year month day days_in_month
    local n="$($BASHLETS_NAMESPACE integer random)"

    year=$((n % (last - first) + first))
    month=$((n % 12 + 1))

    days_in_month="$($BASHLETS_NAMESPACE month days "$month" "$year")"
    day=$((n % days_in_month + 1))

    printf "%d-%02d-%02d\n" "$year" "$month" "$day"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
