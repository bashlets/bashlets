#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


function bashlets_error()
{
    echo "$@" >&2
}

BASHLETS_ERROR=bashlets_error
BASHLETS_CORE_GITHUB_API_ERROR_HEADER="GitHub API error"
BASHLETS_CORE_GITHUB_API_ERROR=1


function __bashlets::core::github::api::request()
{
    local what="${1:-body}" ; shift

    function ____bashlets::core::github::api::request()
    {
        local accept user_agent oauth_token
        local response headers body http_code
        local error_message

        # @cf https://developer.github.com/v3/media/#request-specific-version
        accept="-H 'Accept: application/vnd.github.v3+json'"

        # @cf https://developer.github.com/v3/#user-agent-required
        if [[ -n $BASHLETS_CORE_GITHUB_API_USER_AGENT ]]
        then
            user_agent="-H 'User-Agent: $BASHLETS_CORE_GITHUB_API_USER_AGENT'"
        fi

        if [[ -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]]
        then
            oauth_token="-H 'Authorization: token $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN'"
        fi

        # Perform HTTP request
        response="$(
            eval curl -is                                                  \
                "$accept"                                                  \
                "$user_agent"                                              \
                "$oauth_token"                                             \
                --write-out "%{http_code}"                                 \
                "$@"
        )"

        if [[ -n $BASHLETS_CORE_GITHUB_API_DEBUG ]]
        then
            echo "$response" >&2
        fi

        # Extract headers, body, HTTP code
          headers="$(sed -n '1,/^\r*$/p'     <<<"$response")"
             body="$(sed    '1,/^\r*$/d; $d' <<<"$response")"
        http_code="$(sed -n '$p'             <<<"$response")"

        # Check HTTP code
        if [[ $http_code == 000 ]]
        then
            $BASHLETS_ERROR "$BASHLETS_CORE_GITHUB_API_ERROR_HEADER [cURL error]"
            return $BASHLETS_CORE_GITHUB_API_ERROR
        elif [[ $http_code != 200 ]]
        then
            error_message="$(jq -r .message <<<"$body")"
            $BASHLETS_ERROR "$BASHLETS_CORE_GITHUB_API_ERROR_HEADER [$error_message]"
            return $BASHLETS_CORE_GITHUB_API_ERROR
        fi

        # Echo headers/body
        eval echo "\"\$$what\""
    }

    ____bashlets::core::github::api::request "$@"
}

#@public
function bashlets::core::github::api::version()
{
    echo v3
}

#@public
function bashlets::core::github::api::get()
{
    local url="$1"

    [[ -n $url ]] || return

    __bashlets::core::github::api::request body                \
        "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}"
}

#@public
function bashlets::core::github::api::header()
{
    local url="$1" key="${2:-[^:]\+}"

    [[ -n $url ]] || return

    __bashlets::core::github::api::request headers             \
        "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}"                \
        | grep "^$key: "
}

#@public
function bashlets::core::github::api::header_value()
{
    local url="$1" key="${2:-[^:]\+}"

    [[ -n $url ]] || return

    __bashlets::core::github::api::request headers             \
        "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}"                \
        | sed -n "s/^$key: \(.*\)/\\1/p"
}

#@public
function bashlets::core::github::api::post()
{
    local url="$1" data="${2:-\{\}}"

    [[ -n $url || -n $BASHLETS_CORE_GITHUB_API_OAUTH_TOKEN ]] || return

    __bashlets::core::github::api::request body -X POST        \
        -H "Content-Type: application/json"                    \
        --data "$data"                                         \
        "${BASHLETS_CORE_GITHUB_API_ENDPOINT}${url}"
}

#@public
function bashlets::core::github::api::rels()
{
    local url="$1" filter="${2:-.+}"
    local regex="<(.+)>\;[[:space:]]rel=\"($filter)\""
    [[ -n $url ]] || return
    IFS=, read -a rels <<<$(
        bashlets::core::github::api::header_value "$url" Link
    )
    for rel in "${rels[@]}"
    do
        if [[ $rel =~ $regex ]]
        then
            printf "%s:%s\n" ${BASH_REMATCH[2]} ${BASH_REMATCH[1]}
        fi
    done
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
