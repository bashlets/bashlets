#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-8 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlets core::github::api
source bashlets core::github::defs

# Get the link relation for the given page of results.
#
# @cf   https://developer.github.com/v3/#pagination
function __bashlets::core::github::page::rel()
{
    local url="$1" key="${2:-next}"
    local regex="${key}:(.*)" rel

    [[ -n $url ]] || return

    rel="$($BASHLETS_NAMESPACE api rels "$url" "$key")"
    if [[ $rel =~ $regex ]]
    then
        echo "${BASH_REMATCH[1]#${BASHLETS_CORE_GITHUB_API_ENDPOINT}}"
    fi
}

# Get the link relation for the next page of results.
#
# @cf   https://developer.github.com/v3/#pagination
#@public
function bashlets::core::github::page::next()
{
    local url="$1"
    __bashlets::core::github::page::rel "$url" next
}

# Get the link relation for the last page of results.
#
# @cf   https://developer.github.com/v3/#pagination
#@public
function bashlets::core::github::page::last()
{
    local url="$1"
    __bashlets::core::github::page::rel "$url" last
}

# Get the number of result pages.
#
# @cf   https://developer.github.com/v3/#pagination
#@public
function bashlets::core::github::page::count()
{
    local url="$1" regex="page=([0-9]+)" last
    last="$(bashlets::core::github::page::last "$url")"
    [[ $last =~ $regex ]] && echo "${BASH_REMATCH[1]}"
}

# Get paginated items.
#
# @cf   https://developer.github.com/v3/#pagination
#@public
function bashlets::core::github::page::items()
{
    local url="$1" key="$2"
    local limit="${3:-100}" callback="${4:-cat}"
    local count=0
    
    [[ -n $url || -n $key ]] || return

    while true
    do
        local item next
        declare -a items=($($BASHLETS_NAMESPACE api get "$url" ".[].\"$key\""))

        for item in "${items[@]}"
        do
            (( count < limit )) || break 2
            ((count++))
            [[ -n $item ]] && echo "$item"
        done

        next="$($BASHLETS_NAMESPACE page next "$url")"
        [[ -n $next ]] || break
        url="$next"

    done | $callback
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
